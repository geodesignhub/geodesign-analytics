<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>Geodesignhub Analytics</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="Description" lang="en" content="Geodesignhub Project Analytics">
    <meta name="author" content="Geodesignhub">
    <meta name="robots" content="index, follow">
    <!-- icons -->
    <link rel="shortcut icon" href="favicon.ico">
    <!-- Bootstrap Core CSS file -->
    <link rel="stylesheet" href="assets/css/bootstrap.min.css">
    <!-- Override CSS file - add your own CSS rules -->
    <link rel="stylesheet" href="assets/css/styles.css">
    <link rel="stylesheet" href="assets/css/ion.rangeSlider.min.css">
    <link rel="stylesheet" type="text/css" href="assets/css/flatty.css" />
    <link href='https://fonts.googleapis.com/css?family=Open+Sans' rel='stylesheet' type='text/css'>
    <link href='https://fonts.googleapis.com/css?family=Raleway' rel='stylesheet' type='text/css'>
    <!-- Conditional comment containing JS files for IE6 - 8 -->
    <!--[if lt IE 9]>
            <script src="assets/js/html5.js"></script>
            <script src="assets/js/respond.min.js"></script>
        <![endif]-->
</head>

<body class="d-flex flex-column h-100">
    <!-- Navigation -->
    <!-- As a heading -->
     
<header data-bs-theme="dark">
    <nav class="navbar navbar-expand-md navbar-dark fixed-top bg-dark">
      <div class="container-fluid">
        <a class="navbar-brand" href="#">Geodesignhub Analytics</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarCollapse" aria-controls="navbarCollapse" aria-expanded="false" aria-label="Toggle navigation">
          <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarCollapse">
          <!-- <ul class="navbar-nav me-auto mb-2 mb-md-0">
            <li class="nav-item">
              <a class="nav-link active" aria-current="page" href="https://geodesignhub.github.io/geodesign-analytics">Github</a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="#">Link</a>
            </li>
            <li class="nav-item">
              <a class="nav-link disabled" aria-disabled="true">Disabled</a>
            </li>
          </ul> -->
          <!-- <form class="d-flex" role="search">
            <input class="form-control me-2" type="search" placeholder="Search" aria-label="Search">
            <button class="btn btn-outline-success" type="submit">Search</button>
          </form> -->
        </div>
      </div>
    </nav>
  </header>
  

    <!-- Page Content -->
    <main class="flex-shrink-0">
        <div class="container">
            <div class="mt-5 col-12">
                <div class="row">
                    <div class="col-12">
                        <p>This is a Geodesignhub plugin to visually analyze the process of designing. It reads design synthesis and diagram information from the project and produces a visualization for deeper understanding. This code for this plugin is located on a <a href="https://github.com/geodesignhub/geodesign-analytics">GitHub repository</a>.
                        </p><br>
                    </div>
                </div>
            </div>
        </div>
        <!-- /.row -->
        <hr>
        <div class="container">
            <div class="mt-5 col-12">
                <h3>Contribution summary <small class="text-muted">Details about who added diagrams and when</small>
                </h3>
                <br>
                <p class="lead" id="contribution_summary"></p>
                <h5>Top Contributors</h5>
                <p class="lead" id="member_contributions"></p>
                <br>

                <div class='diagram_chart'>
                    <h5>Diagrams and systems</h5>
                    <div id='diagram_chart'></div>
                </div>


            </div>
        </div>
        <hr>
        <div class="container">
            <div class="mt-5 col-12">
                <h3>Diagram Paths <small class="text-muted">Diagrams selected by design teams throughout design
                        process.</small></h3>
                <p>The y-axis is all the diagrams that are used in designs, grouped by systems. On the x-axis, designs
                    are in chronological order of saving the first design saved in the project is on the left and last
                    saved design is the right most value. A point means that the diagram was in the design and the
                    joined lines mean that the diagram was present in consecutively saved designs by different
                    independent teams.</p>
                <div class='neogotiationchart'>
                    <div id='neogotiationchart'></div>
                </div>
            </div>
        </div>
        <!-- /.row -->
        <hr>
        <div class="container">
            <div class="mt-5 col-12">
                <h3>Design Timelines <small class="text-muted">A timeline of when different teams saved their
                        designs</small></h3>
                <p>The first design saved is on the left, the last one saved is on the right.</p>
                <div class='chart'>
                    <div id='chart'></div>
                </div>
            </div>
        </div>
        <!-- /.row -->
        <hr>

        <div class="container">
            <div class="mt-5 col-12">
                <h3>Design Pulse <small class="text-muted">Changes to the design made by the team.</small></h3>
                <div id="ctpulsedetails">
                </div>
                <hr>
                <h3>Design Evolution <small class="text-muted">Design teams and how their design evolved</small></h3>
                <div id="ctdetails">
                </div>
            </div>
        </div>

    </main>

    <!-- /.container-fluid -->
    <!-- JQuery scripts -->
    <script type="text/javascript" src="assets/js/jquery.min.js"></script>
    <script type="text/javascript" src="assets/js/humane.min.js"></script>
    <!-- Bootstrap Core scripts -->
    <script type="text/javascript" src="assets/js/ion.rangeSlider.min.js"></script>
    <script type="text/javascript" src="assets/js/bootstrap.bundle.min.js"></script>
    <script type="text/javascript" src="assets/js/jquery.sparkline.min.js"></script>
    <script type="text/javascript" src="assets/js/moment.min.js"></script>
    <script type="text/javascript" src="assets/js/plotly.min.js"></script>
    <script type="text/javascript" src="assets/js/colors.js"></script>
    <script type="text/javascript">
        function clearExistingHistory() {
            document.getElementById("ctdetails").innerHTML = "";
            document.getElementById("ctpulsedetails").innerHTML = "";
        }
        var synDetails = function () {
            return {
                cteams: [],
                diagrams: [],
                diagramslookup: {},
                syndiagrams: [],
                systems: [],
                syns: [],
                lastclicked: '',
                synAddRemove: []
            }
        }();

        // grid: http://jsfiddle.net/6qkdP/2/
        function generateSynChart(syndata, cteams) {
            const seriesdata = cteams.reduce((acc, team) => {
                acc[team.id] = {
                    x: [],
                    y: [],
                    type: 'scatter',
                    name: team.title,
                    text: [],
                    marker: {
                        size: 8,
                        color: team.color.rgb
                    }
                };
                return acc;
            }, {});

            syndata.forEach(syn => {
                const date = moment(syn.creationdate).format("YYYY-MM-DD HH:MM:SS");
                const cteamid = syn.cteamid;
                const desc = syn.description;
                const index = cteams.findIndex(team => team.id === cteamid);
                seriesdata[cteamid].x.push(date);
                seriesdata[cteamid].y.push(index + 1);
                seriesdata[cteamid].text.push(desc);
            });

            const series = Object.values(seriesdata);

            const layout = {
                xaxis: {
                    title: 'Time Design Saved',
                    titlefont: {
                        family: "Raleway",
                        size: 12,
                        color: 'darkgrey'
                    },
                    autorange: true,
                    showgrid: true,
                    zeroline: false,
                    showline: false,
                    autotick: true,
                    ticks: '',
                    showticklabels: true
                },
                yaxis: {
                    showgrid: false,
                    zeroline: true,
                    showline: false,
                    autotick: true,
                    ticks: '',
                    range: [-1, cteams.length + 1],
                    showticklabels: false
                }
            };

            Plotly.newPlot('chart', series, layout);
        }


        function synDataReceivedOK(data) {
            function processData(data) {
                assignColorsToTeams(data.cteams);
                populateDiagramsLookup(data.diagrams, data.systems);
                synDetails.cteams = data.cteams;
                synDetails.diagrams = data.diagrams;
                synDetails.syndiagrams = data.syndiagrams;
                synDetails.syns = data.syns;
                synDetails.systems = data.systems;
                synDetails.members = data.members['members'];
                populateContributionSummary(data.diagrams, data.systems, data.members['members']);
                setupCTeamContainers(data.cteams);
                var s = populateCTeamSyn(data.syns, data.syndiagrams, data.cteams);
                var syndiagsorted = s[0];
                synDetails.ctidsyn = s[1];
                createDiagramsMiniGrid(syndiagsorted, data.systems, synDetails.diagramslookup, data.cteams, data.diagrams);
                var sar = populateAddedRemoved(syndiagsorted, synDetails.diagramslookup);
                synDetails.synAddRemove = sar;
                generateSynChart(syndiagsorted, data.cteams);
                generateSparklines(sar, data.systems, synDetails.diagramslookup);
                generatenegotiationsChart(synDetails.syndiagrams, sar, syndiagsorted, synDetails.diagramslookup, data.cteams, data.diagrams);
                generateCTPulse(sar, syndiagsorted, data.cteams);
            }

            function assignColorsToTeams(cteams) {
                var ctlen = cteams.length;
                for (var x = 0; x < ctlen; x++) {
                    var color = Colors.random();
                    cteams[x].color = color;
                }
            }

            function populateDiagramsLookup(diagrams, systems) {
                var diaglen = diagrams.length;
                var syslen = systems.length;
                for (var z = 0; z < diaglen; z++) {
                    var curdiag = diagrams[z];
                    var cursysid = curdiag.sysid;
                    var sysname = "";
                    for (var h = 0; h < syslen; h++) {
                        var cursys = systems[h];
                        if (cursysid === cursys.id) {
                            sysname = cursys.name;
                            break;
                        }
                    }
                    synDetails.diagramslookup[curdiag.id] = sysname + "-" + curdiag.rank;
                }
            }

            processData(data);

        }

        function populateContributionSummary(diagrams, systems, members) {
            const num_members = members.length;
            const num_diagrams = diagrams.length;
            const contribution_text = `<b>${num_diagrams} diagrams</b> from <b>${num_members} participants</b>`;
            $("#contribution_summary").html(contribution_text);

            const counts = diagrams.reduce((acc, { author }) => {
                acc[author] = (acc[author] || 0) + 1;
                return acc;
            }, {});

            const sorted_contributors = Object.entries(counts)
                .sort(([, a], [, b]) => b - a)
                .slice(0, 5);

            const contributor_list = sorted_contributors.map(([author, count]) => {
                const li = document.createElement('li');
                li.innerHTML = `<b>${author}</b> with ${count} diagrams`;
                return li.outerHTML;
            }).join('');

            const ul = document.createElement('ul');
            sorted_contributors.forEach(([author, count]) => {
                const li = document.createElement('li');
                li.innerHTML = `<b>${author}</b> with ${count} diagrams`;
                ul.appendChild(li);
            });
            document.getElementById('member_contributions').appendChild(ul);

            const all_systems_data = systems.reduce((acc, { id, name, color }) => {
                acc[id] = {
                    x: [],
                    y: [],
                    mode: 'markers',
                    type: 'scatter',
                    name,
                    marker: { color },
                    id
                };
                return acc;
            }, {});

            diagrams.forEach(({ sysid, created_at, rank }) => {
                const formatted_date = moment(created_at).format("YYYY-MM-DD HH:MM:SS");
                all_systems_data[sysid].x.push(formatted_date);
                all_systems_data[sysid].y.push(rank);
            });

            const all_plot_data = Object.values(all_systems_data);

            Plotly.newPlot('diagram_chart', all_plot_data);
        }

        function generateCTPulse(synaddremove, syndiagsorted, cteams) {
            var teamAdditions = {};
            var teamRemovals = {};

            cteams.forEach(team => {
                teamAdditions[team.id] = {
                    x: [],
                    y: [],
                    name: team.title
                };
                teamRemovals[team.id] = {
                    x: [],
                    y: [],
                    name: team.title
                };
            });

            syndiagsorted.forEach((syn, index) => {
                var teamID = syn.cteamid;
                teamAdditions[teamID].x.push(index);
                teamRemovals[teamID].x.push(index);

                var synChanges = synaddremove.find(change => change.id === syn.id);
                if (synChanges) {
                    teamAdditions[teamID].y.push(synChanges.adds.length);
                    teamRemovals[teamID].y.push(-synChanges.removes.length);
                }
            });

            Object.keys(teamAdditions).forEach(teamID => {
                var additionsTrace = {
                    x: teamAdditions[teamID].x,
                    y: teamAdditions[teamID].y,
                    fill: 'tozeroy',
                    type: 'scatter',
                    mode: 'line',
                    line: {
                        color: 'rgb(85,165,50)',
                        width: 2
                    }
                };

                var removalsTrace = {
                    x: teamRemovals[teamID].x,
                    y: teamRemovals[teamID].y,
                    fill: 'tozeroy',
                    type: 'scatter',
                    mode: 'line',
                    line: {
                        color: 'rgb(189,44,0)',
                        width: 2
                    }
                };

                var layout = {
                    title: teamAdditions[teamID].name,
                    height: 300,
                    showlegend: false,
                    yaxis: {
                        title: 'Additions in green and deletions in red',
                        titlefont: {
                            family: "Raleway",
                            size: 12,
                            color: 'darkgrey'
                        },
                    },
                    xaxis: {
                        showticklabels: false,
                    }
                };

                var data = [additionsTrace, removalsTrace];
                Plotly.newPlot('pulsecont-' + teamID, data, layout);
            });

        }

        function generatenegotiationsChart(syndiagrams, synaddremove, syndiagssorted, diagramslookup, cteams,
        diagrams) {
            function dynamicSort(property) {
                var sortOrder = 1;
                if (property[0] === "-") {
                    sortOrder = -1;
                    property = property.substr(1);
                }
                return function (a, b) {
                    var result = (a[property] < b[property]) ? -1 : (a[property] > b[property]) ? 1 : 0;
                    return result * sortOrder;
                }
            }

            var allDiagrams = [];
            syndiagrams.forEach(syn => {
                allDiagrams = allDiagrams.concat(syn.diagrams);
            });

            var uniqueDiagrams = allDiagrams.filter(onlyUnique);
            var diagramNames = uniqueDiagrams.map(id => ({
                id,
                name: diagramslookup[id].split('-')[0]
            })).sort(dynamicSort("name"));

            var sortedDiagrams = diagramNames.map(diag => diag.id);

            var yAxisValues = [-1];
            var yAxisLabels = [""];
            sortedDiagrams.forEach(id => {
                yAxisValues.push(id);
                yAxisLabels.push(diagramslookup[id]);
            });

            var traceData = {};
            sortedDiagrams.forEach(id => {
                traceData[id] = {
                    x: [],
                    y: [],
                    text: []
                };
            });

            var synIdToDesc = {};
            syndiagssorted.forEach(syn => {
                var team = cteams.find(team => team.id === syn.cteamid);
                var desc = syn.description.length > 9 ? syn.description.substring(0, 9) + '..' : syn.description;
                synIdToDesc[syn.id] = `${team.title} ${desc}`;
            });

            var xAxisLabels = [];
            syndiagssorted.forEach(syn => {
                xAxisLabels.push(synIdToDesc[syn.id]);
                sortedDiagrams.forEach(id => {
                    var seen = syn.diagrams.includes(id);
                    traceData[id].x.push(synIdToDesc[syn.id]);
                    traceData[id].y.push(seen ? sortedDiagrams.indexOf(id) : null);
                    traceData[id].text.push(diagramslookup[id]);
                });
            });

            var plotData = [];
            for (var id in traceData) {
                plotData.push({
                    x: traceData[id].x,
                    y: traceData[id].y,
                    text: traceData[id].text,
                    mode: 'markers+lines',
                    hoverinfo: "all",
                    type: 'scatter',
                    legendgroup: traceData[id].text[0].split("-")[0],
                    name: traceData[id].text[0],
                    marker: {
                        size: 4
                    }
                });
            }

            var layout = {
                hovermode: 'closest',
                margin: {
                    l: 10,
                    r: 10,
                    b: 100,
                    t: 30,
                    pad: 4
                },
                showlegend: true,
                xaxis: {
                    title: 'Designs chronologically ordered',
                    titlefont: {
                        family: "Raleway",
                        size: 12,
                        color: 'darkgrey'
                    },
                    tickfont: {
                        family: "Raleway",
                        size: 10,
                        color: 'black'
                    },
                    showgrid: true,
                    tickmode: "array",
                    tickvals: xAxisLabels,
                    ticktext: xAxisLabels,
                    tickangle: 90,
                    showticklabels: true,
                },
                yaxis: {
                    showgrid: false,
                    zeroline: false,
                    showline: false,
                    autotick: false,
                    tickmode: "array",
                    tickvals: yAxisValues,
                    ticktext: yAxisLabels,
                    range: [-1, sortedDiagrams.length],
                    showticklabels: false,
                }
            };
            Plotly.newPlot('neogotiationchart', plotData, layout);

        }

        function createDiagramsMiniGrid(syndiagramssorted, systems, diagramslookup, cteams, diagrams) {
            // loop over the cteams
            var ctlen = cteams.length;
            // get the row and cols for grid. 
            var rows = Math.max.apply(Math, diagrams.map(function (o) {
                return o.rank;
            }));
            var cols = systems.length;
            var dlen = diagrams.length;

            for (var x = 0; x < ctlen; x++) {
                // create a grid
                var ctid = cteams[x].id;
                var grid = clickableGrid(ctid, systems, rows, cols, function (el, row, col, i) {
                    // console.log("You clicked on element:", el);
                    // console.log("You clicked on row:", row);
                    // console.log("You clicked on col:", col);
                    // console.log("You clicked on item #:", i);
                    // el.className = 'clicked';
                    // if (synDetails.lastClicked) lastClicked.className = '';
                    // synDetails.lastClicked = el;
                });
                document.getElementById("gridcont-" + ctid).appendChild(grid);
            }
        }

        function generateSparklines(synaddremove, systems, diagLookup) {
            // for each synthesis, look at add / remove then total per system.
            const systemCount = systems.length;

            function isEven(number) {
                return number % 2 === 0;
            }

            const synthesisCount = synaddremove.length;
            for (let i = 0; i < synthesisCount; i++) {
                const systemChanges = {};
                const currentSynthesis = synaddremove[i];
                const synthesisId = currentSynthesis.id;

                // iterate over additions
                currentSynthesis.adds.forEach(additionId => {
                    const systemName = diagLookup[additionId].split("-")[0];
                    if (!systemChanges[systemName]) {
                        systemChanges[systemName] = { addTotal: 0, removeTotal: 0 };
                    }
                    systemChanges[systemName].addTotal += 1;
                });

                // iterate over removals
                currentSynthesis.removes.forEach(removalId => {
                    const systemName = diagLookup[removalId].split("-")[0];
                    if (!systemChanges[systemName]) {
                        systemChanges[systemName] = { addTotal: 0, removeTotal: 0 };
                    }
                    systemChanges[systemName].removeTotal += 1;
                });

                // construct dataset
                const tooltipOffsets = {};
                const finalValues = [];
                const colorMap = [];
                let counter = -1;
                const suffixes = [' added', ' removed'];

                for (const systemName in systemChanges) {
                    const changes = systemChanges[systemName];
                    finalValues.push(changes.addTotal);
                    counter += 1;
                    tooltipOffsets[counter] = systemName + suffixes[0];
                    colorMap.push("green");

                    finalValues.push(changes.removeTotal * -1);
                    counter += 1;
                    tooltipOffsets[counter] = systemName + suffixes[1];
                    colorMap.push("red");
                }

                // Draw a sparkline for the #sparkline element
                $('#syn-' + synthesisId + '-table-baseline').sparkline(finalValues, {
                    type: "bar",
                    tooltipFormat: '{{offset:offset}} {{value}}',
                    tooltipValueLookups: { offset: tooltipOffsets },
                    colorMap: colorMap
                });
            }
        }

        function onlyUnique(value, index, self) {
            return self.indexOf(value) === index;
        }

        function clearMiniGrid(cteamid) {
            var cteams = synDetails.cteams;
            for (var x = 0; x < cteams.length; x++) {
                var ctid = cteams[x].id;
                if (cteamid === ctid) {
                    $("#gridtable-" + cteams[x].id + ">tr>td").removeClass("selected");
                    $("#gridtable-" + cteams[x].id + ">tr>td").removeClass("added");
                    $("#gridtable-" + cteams[x].id + ">tr>td").removeClass("removed");
                }
            }
            //
        }

        function populateMiniGrid(diaglist, curctid, diagramslookup, toAdd, toRemove) {
            var dlen = diaglist.length;
            for (var x = 0; x < dlen; x++) {
                var curdiag = diaglist[x];
                var dlookup = diagramslookup[curdiag];
                var s = dlookup.split('-');
                var col = s[0];
                var row = s[1] - 1;
                document.getElementById(curctid + '-' + col + '-' + row).classList.add('selected');
            }

            if (toAdd) {
                var addlen = toAdd.length;
                for (var z1 = 0; z1 < addlen; z1++) {
                    var curadd = toAdd[z1];
                    var dladd = diagramslookup[curadd];
                    var s1 = dladd.split('-');
                    var col1 = s1[0];
                    var row1 = s1[1] - 1;
                    document.getElementById(curctid + '-' + col1 + '-' + row1).classList.remove('selected');
                    document.getElementById(curctid + '-' + col1 + '-' + row1).classList.add('added');
                }
            }

            if (toRemove) {
                var removelen = toRemove.length;
                for (var z2 = 0; z2 < removelen; z2++) {
                    var curremove = toRemove[z2];
                    var dlremove = diagramslookup[curremove];
                    var s2 = dlremove.split('-');
                    var col2 = s2[0];
                    var row2 = s2[1] - 1;
                    document.getElementById(curctid + '-' + col2 + '-' + row2).classList.remove('selected');
                    document.getElementById(curctid + '-' + col2 + '-' + row2).classList.add('removed');
                }
            }
        }

        function populateAddedRemoved(syndiagsorted, diagramslookup) {
            // console.log(syndiagsorted, diagramslookup);
            var seenctid = [];
            var ctBaseDiagrams = {};
            var curSynAddRemove = [];
            var syndiaglen = syndiagsorted.length;
            var seen = false;
            for (var k = 0; k < syndiaglen; k++) {
                var cursyndiag = syndiagsorted[k];
                var curctid = cursyndiag.cteamid;
                seen = seenctid.includes(curctid);
                if (!seen) {
                    seenctid.push(curctid);
                    ctBaseDiagrams[curctid] = cursyndiag.diagrams;
                    populateMiniGrid(cursyndiag.diagrams, curctid, diagramslookup);
                }
                var baselinediagrams = ctBaseDiagrams[curctid];

                var toAdd = [];
                var toRemove = [];
                var selDiags = cursyndiag['diagrams'];
                var seldiaglen = selDiags.length;
                for (var g1 = 0; g1 < seldiaglen; g1++) {
                    var defaultadd = selDiags[g1];
                    // Add baseline diagrams if needed
                }

                toAdd = selDiags.filter(function (el) {
                    return !baselinediagrams.includes(el);
                });
                toRemove = baselinediagrams.filter(function (el) {
                    return !selDiags.includes(el);
                });

                toRemove = toRemove.filter(onlyUnique);
                toAdd = toAdd.filter(onlyUnique);
                curSynAddRemove.push({
                    'id': cursyndiag['id'],
                    'adds': toAdd,
                    'removes': toRemove
                });

                var toAddlen = toAdd.length;
                var toRemovelen = toRemove.length;
                if (toAddlen > 0) {
                    for (var j = 0; j < toAddlen; j++) {
                        var curAdd = toAdd[j];
                        var addElement = document.createElement('p');
                        addElement.className = 'blob-num-addition';
                        addElement.innerHTML = '<span class="glyphicon glyphicon-plus"></span> ' + diagramslookup[curAdd];
                        document.getElementById('syn-' + cursyndiag['id'] + '-table-add').appendChild(addElement);
                    }
                }
                if (toRemovelen > 0) {
                    for (var u = 0; u < toRemovelen; u++) {
                        var curRemove = toRemove[u];
                        var removeElement = document.createElement('p');
                        removeElement.className = 'blob-num-deletion';
                        removeElement.innerHTML = '<span class="glyphicon glyphicon-minus"></span> ' + diagramslookup[curRemove];
                        document.getElementById('syn-' + cursyndiag['id'] + '-table-del').appendChild(removeElement);
                    }
                }
                ctBaseDiagrams[curctid] = cursyndiag['diagrams'];
            }
            return curSynAddRemove;
        }

        function populateCTeamSyn(synthesisdata, syndiagramdata, cteams) {
            const syndiagdatahybrid = synthesisdata.map(syn => {
                const diagrams = syndiagramdata.find(diag => diag.synthesisid === syn.id)?.diagrams || [];
                return { ...syn, diagrams };
            }).sort((a, b) => new Date(a.creationdate) - new Date(b.creationdate));

            const ctidsyn = cteams.reduce((acc, team) => {
                acc[team.id] = [];
                return acc;
            }, {});

            const seenctid = new Set();

            syndiagdatahybrid.forEach(syn => {
                const { cteamid, id, description, creationdate } = syn;
                if (!seenctid.has(cteamid)) {
                    seenctid.add(cteamid);
                }
                ctidsyn[cteamid].push(id);

                const curCTEle = document.getElementById(`cteam-${cteamid}`);
                const friendlycreationdate = moment(creationdate).format('MMM Do YYYY, h:mm a');

                const synDiv = document.createElement('div');
                synDiv.id = `syn-${id}`;
                synDiv.className = 'commits-listing';
                curCTEle.appendChild(synDiv);

                const commitGroupTitle = document.createElement('div');
                commitGroupTitle.className = 'commit-group-title';
                commitGroupTitle.innerHTML = `<span class="glyphicon glyphicon glyphicon-tag"> </span> Saved ${friendlycreationdate}.`;
                synDiv.appendChild(commitGroupTitle);

                const commitHeader = document.createElement('div');
                commitHeader.className = 'commit-header';
                commitHeader.textContent = description;
                synDiv.appendChild(commitHeader);

                if (seenctid.has(cteamid)) {
                    const tableBaseline = document.createElement('div');
                    tableBaseline.className = 'table-list-cell blob-code-baseline';
                    tableBaseline.id = `syn-${id}-table-baseline`;
                    synDiv.appendChild(tableBaseline);

                    const tableList = document.createElement('div');
                    tableList.className = 'table-list';
                    tableList.id = `syn-${id}-table`;
                    synDiv.appendChild(tableList);

                    const tableAdd = document.createElement('div');
                    tableAdd.className = 'table-list-cell blob-code-addition';
                    tableAdd.id = `syn-${id}-table-add`;
                    tableList.appendChild(tableAdd);

                    const tableDel = document.createElement('div');
                    tableDel.className = 'table-list-cell blob-code-deletion';
                    tableDel.id = `syn-${id}-table-del`;
                    tableList.appendChild(tableDel);
                } else {
                    const commitTitle = document.createElement('div');
                    commitTitle.className = 'commit-title';
                    commitTitle.textContent = "Initial Design";
                    synDiv.appendChild(commitTitle);
                }
            });

            Object.keys(ctidsyn).forEach(sliderctid => {
                const cursyn = ctidsyn[sliderctid];
                $(`#slider-${sliderctid}`).ionRangeSlider({
                    type: "single",
                    skin: "square",
                    min: 1,
                    max: cursyn.length,
                    step: 1,
                    onFinish: function (data) {
                        const $this = $(data.input);
                        const synvalue = $this.prop("value");
                        const ctid = $this.prop("id").split('-')[1];
                        updateMiniGrid(synvalue, ctid);
                    },
                });
            });

            return [syndiagdatahybrid, ctidsyn];
        }

        function updateMiniGrid(synvalue, ctid) {
            var dlookup = synDetails.diagramslookup;
            var synvalue = synvalue - 1;
            var synid = synDetails.ctidsyn[ctid][synvalue];
            var synaddremove = synDetails.synAddRemove;
            var adlen = synaddremove.length;
            var toAdd = [];
            var toRemove = [];
            for (var x = 0; x < adlen; x++) {
                var cursyn = synaddremove[x];
                if (cursyn.id === synid) {
                    toAdd = cursyn.adds;
                    toRemove = cursyn.removes;
                }
            }

            var syndiags = synDetails.syndiagrams;
            var diaglen = syndiags.length;
            clearMiniGrid(parseInt(ctid));
            for (var k1 = 0; k1 < diaglen; k1++) {
                var cursyndiag = syndiags[k1];
                if (synid === cursyndiag.synthesisid) {
                    // console.log(toAdd, toRemove);                 
                    populateMiniGrid(cursyndiag.diagrams, ctid, dlookup, toAdd, toRemove);
                    break;
                }
            }
        }

        function setupCTeamContainers(cteamdata) {
            var ctlen = cteamdata.length;
            var row = 0;
            var row1 = 0;
            for (var x = 0; x < ctlen; x++) {
                var curCT = cteamdata[x];
                var curctid = curCT['id'];
                if (row1 === 0 || ((row % 3) == 0)) {
                    row1 += 1;
                    var pulserow = document.createElement('div');
                    pulserow.id = 'pulserow-' + row1;
                    pulserow.className = 'row margin-b-2';
                    document.getElementById("ctpulsedetails").appendChild(pulserow);
                }

                var pulsecont = document.createElement('div');
                pulsecont.id = 'pulsecont-' + curctid;
                pulsecont.className = 'col-sm-4 col-md-4 col-border';
                document.getElementById('pulserow-' + row1).appendChild(pulsecont);

                if (row === 0 || ((row % 6) == 0)) {
                    row += 1;
                    var rowDiv = document.createElement('div');
                    rowDiv.id = 'row-' + row;
                    rowDiv.className = 'row margin-b-2';
                    document.getElementById("ctdetails").appendChild(rowDiv);
                }

                var cteamDiv = document.createElement('div');
                cteamDiv.id = 'cteam-' + curctid;
                cteamDiv.className = 'col-sm-4 col-md-2 col-border';
                document.getElementById('row-' + row).appendChild(cteamDiv);

                var h4 = document.createElement('h4');
                h4.innerHTML = "<div class='square' style='background-color:" + curCT['color']['rgb'] + ";'></div> " + curCT['title'];
                cteamDiv.appendChild(h4);

                var hr = document.createElement('hr');
                cteamDiv.appendChild(hr);

                var gridcont = document.createElement('div');
                gridcont.className = 'gridcont';
                gridcont.id = 'gridcont-' + curctid;
                cteamDiv.appendChild(gridcont);

                var slidercont = document.createElement('div');
                slidercont.className = 'slidercont';
                slidercont.id = 'slidercont-' + curctid;
                slidercont.innerHTML = "<input id='slider-" + curctid + "'></input>";
                cteamDiv.appendChild(slidercont);

                var hr2 = document.createElement('hr');
                cteamDiv.appendChild(hr2);
            }
        }

        function submitPost(apikey, projectid) {
            if (apikey.length > 20 && projectid.length == 16) {
                var d = {
                    'apikey': apikey,
                    'projectid': projectid
                };
                var promise = $.ajax({
                    url: '/post/',
                    data: JSON.stringify(d),
                    contentType: "application/json",
                    type: 'POST'
                });

                humane.log("Querying project data..", {
                    addnCls: 'humane-flatty-info'
                });

                promise.done(function (data) {
                    // console.log(data);
                    if (data.status) {
                        clearExistingHistory();
                        synDataReceivedOK(data);
                        humane.log("Project Data populated", {
                            addnCls: 'humane-flatty-success'
                        });
                    } else {
                        humane.log("Error in getting project data. Please contact your adminstrator.", {
                            addnCls: 'humane-flatty-error'
                        });

                    }
                });
                promise.fail(function (data) {
                    humane.log("Either the API Key or Project ID is incorrect. Please check your input.", {
                        addnCls: 'humane-flatty-error'
                    });
                });
            } else {
                humane.log("Please enter a valid project id and a API key.", {
                    addnCls: 'humane-flatty-error'
                });
            }
        }

        function clickableGrid(ctid, systems, rows, cols, callback) {
            // map the systemid to column. 
            const collookup = systems.reduce((acc, system, index) => {
                acc[index] = system.name;
                return acc;
            }, {});

            const grid = document.createElement('table');
            grid.setAttribute("id", `gridtable-${ctid}`);
            grid.className = 'grid';

            for (let r = 0; r < rows; ++r) {
                const tr = grid.appendChild(document.createElement('tr'));
                for (let c = 0; c < cols; ++c) {
                    const cellid = `${ctid}-${collookup[c]}-${r}`;
                    const cell = tr.appendChild(document.createElement('td'));
                    cell.setAttribute("id", cellid);
                    // cell.addEventListener('click', () => callback(cell, r, c, i), false);
                }
            }
            return grid;
        }
    </script>
    <script>
        
        var project_data = <%- projectdata %>;

        synDataReceivedOK(project_data);
        humane.log("Project Data populated", {
            addnCls: 'humane-flatty-success'
        });
    </script>
</body>

</html>